# .gitlab-ci/gitlab.yml : GitLab pipeline

# Define the variables
variables:
  # Recommended storage driver for Docker
  DOCKER_DRIVER: overlay2
  # Disable TLS verification to simplify the setup with Docker-in-Docker
  DOCKER_TLS_CERTDIR: ""
  GIT_FETCH_EXTRA_FLAGS: --prune --quiet --tags

# Job to run the tests and generates a coverage report
test:
  stage: test
  image: ubuntu:latest
  before_script:
    # Install necessary packages
    - apt-get update && apt-get install -y curl
    # - curl -LsSf https://astral.sh/uv/install.sh | sh
    - curl -LsSf https://astral.sh/uv/install.sh | env UV_UNMANAGED_INSTALL='/usr/local/bin' sh
    # - source $HOME/.cargo/env
    - uv python install 3.12
  script:
    # Run tests using uv
    - uv run pytest --cov --cov-config=pyproject.toml --cov-report=xml
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml

# Job to build the Docker image
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    # Log in to GitLab Container Registry
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    # Build the Docker image, tag it and push it to the registry

    - export IMAGE_TAG="$(git describe --tags --abbrev=8 --always)"
    - echo "IMAGE_TAG = ${IMAGE_TAG}"
    # Build the Docker image, tag it and push it to the registry as:
    #   registry.gitlab.com/user/fastapi-uv/fastapi-uv:v0.3.4-8-g7674a5d4
    - |
      docker build \
       -t "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${CI_PROJECT_NAME}:${IMAGE_TAG}" \
       . \
       --push
    # To push also with the git commit short sha, use:
    # "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}"
    # GIT ENV VARIABLES:
    #   CI_PROJECT_NAME if the project URL is gitlab.example.com/group-name/project-1, CI_PROJECT_NAME is project-1.
    #   CI_PROJECT_NAMESPACE
    #   CI_REGISTRY : registry.gitlab.example.com
    #   CI_REGISTRY_IMAGE : registry.gitlab.example.com/my_group/my_project
    #   CI_COMMIT_SHORT_SHA : 8 character commit hash

    ## (already pushed in the build step above)
    ## Push the image to the registry
    # - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"

# Job to test the Docker container after it has been built
container-test:
  stage: pre-deploy-check
  image: docker:latest
  services:
    - docker:dind
  before_script:
    # Install curl
    - apk add curl
  script:
    # Docker info for debugging
    - docker info
    # Log in to GitLab Container Registry
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    # Pull the Docker image from the registry
    - docker pull "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    # Run the Docker container
    - docker run -d --rm --name fastapi-uv "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    # Wait for the service to start
    - sleep 5
    # # Perform the curl test
    - docker ps
    # Output container logs
    - docker logs fastapi-uv 2>&1 | grep 'Uvicorn running'
    # Docker inspect for debugging
    - docker inspect fastapi-uv

    # # Output container logs for debugging
    # - docker logs fastapi-uv

    # # Get the container's IP address
    # - export CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fastapi-uv)
    # - |
    #   echo "Container IP: $CONTAINER_IP"
    # # - RESPONSE=$(curl -s http://$CONTAINER_IP:8001)
    # # Perform the curl test
    # - curl http://localhost:8001 || curl http://127.0.0.1:8001 || curl http://$CONTAINER_IP:8001

    # Perform the curl test using 'docker' as the hostname
    # - RESPONSE=$(curl -s http://localhost:8001)
    # - |
    #   echo "Response from server: $RESPONSE"
    # # Check if the response matches the expected output
    # - |
    #   echo "$RESPONSE" | grep -q '"message":"OK"'

    # Stop the container
    - docker stop fastapi-uv
